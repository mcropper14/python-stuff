def extended_synthetic_division(dividend, divisor):

    # dividend and divisor are both polynomials


    out = list(dividend) # Copy the dividend
    normalizer = divisor[0] 
    xrange = (len(dividend)-(len(divisor)-1)
    for i in xrange(len(dividend)-(len(divisor)-1) 
       out[i] /= normalizer
        # for general polynomial division (when the coefficient isn't one) 
                             # normalize by dividing the coefficient with the divisor's first coefficient
        coef = out[i]
        if coef != 0: # useless to multiply if coef is 0
            for j in xrange(1, len(divisor)): # skip the first coefficient of the divisor,
                                          # because it's only used to normalize the dividend coefficients
                out[i + j] += -divisor[j] * coef

    # The result contains both the quotient and remainder, the remainder is the size of the divisor (the remainder
    # has the same degree as the divisor since it's what couldn't be divided from the dividend), so compute the index
    # return the quotient and remainder.
    separator = -(len(divisor)-1)
    return out[:separator], out[separator:] # return quotient, remainder.


if __name__ == '__main__':
    print ("POLYNOMIAL SYNTHETIC DIVISION")
    N = [-2, -3, 4, 5]
    D = [1, 2]
    print ("  %s / %s =") % (N,D),
    print (" %s remainder %s") % extended_synthetic_division(N, D)
